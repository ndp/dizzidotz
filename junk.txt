<a id="delete-all-btn" class="button"
href="#">
<svg viewBox="0 0 100 100" class="fading-fill-children">
<circle class='bg' r="46" cx="50" cy="50" stroke-width="0" style="filter:url(#dropshadow)"/>
<path stroke='#666' stroke-width='4px' d='
M 35 35 L 75 75
M 75 35 L 35 75'></path>
<path stroke='#999' stroke-width='4px' d='
M 30 30 L 70 70
M 70 30 L 30 70'></path>
<path stroke='#fff' stroke-width='4px' d='
M 25 25 L 65 65
M 65 25 L 25 65'></path>
</svg>
</a>



input[type="radio"] {
  display: none;
}

input[type="radio"] + label {
  color: darkred;
  font-family: Arial, sans-serif;
  font-size: 14px;
}

input[type="radio"] + label span {
  display: inline-block;
  width: 19px;
  height: 19px;
  margin: -1px 4px 0 0;
  vertical-align: middle;
  cursor: pointer;
  -moz-border-radius: 50%;
  border-radius: 50%;
}

input[type="radio"] + label span {
  background-color: purple;
}

input[type="radio"]:checked + label span {
  background-color: mediumpurple;
}

input[type="radio"] + label span,
input[type="radio"]:checked + label span {
  -webkit-transition: background-color 0.4s linear;
  -o-transition: background-color 0.4s linear;
  -moz-transition: background-color 0.4s linear;
  transition: background-color 0.4s linear;
}






  // EXAMPLE OF MOUSE ENTER
  const mouseEnter$ = Observable.fromEvent(dom, 'mouseenter')
  mouseEnter$.subscribe((x) => console.log('ENTER: ', x))


  // EXAMPLE OF DRAGGING
  const mouseDown$ = Observable.fromEvent(dom, 'mousedown')
  const mousemove$ = Observable.fromEvent(document, 'mousemove')
  const mouseup$   = Observable.fromEvent(document, 'mouseup')
  const mousedrag$ = mouseDown$
      .mergeMap(function(md) {
                  var startX = md.offsetX
                  var startY = md.offsetY
                  return mousemove$
                      .map(function(mm) {
                             mm.preventDefault()
                             return {
                               x: mm.offsetX - startX,
                               y: mm.offsetX - startY
                             }
                           })
                      .takeUntil(mouseup$)
                })
  mousedrag$.subscribe((x) => console.log('DRAG: ', x))

